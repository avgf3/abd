import { storage } from '../storage';

export interface NotificationData {
  userId: number;
  type: string;
  title: string;
  message: string;
  data?: any;
}

export class NotificationHelpers {
  // Create a friend request notification
  static async createFriendRequestNotification(
    receiverId: number,
    senderName: string,
    senderId: number,
    requestId: number
  ) {
    return await storage.createNotification({
      userId: receiverId,
      type: 'friendRequest',
      title: 'ðŸ‘« Ø·Ù„Ø¨ ØµØ¯Ø§Ù‚Ø© Ø¬Ø¯ÙŠØ¯',
      message: `Ø£Ø±Ø³Ù„ ${senderName} Ø·Ù„Ø¨ ØµØ¯Ø§Ù‚Ø© Ø¥Ù„ÙŠÙƒ`,
      data: { requestId, senderId, senderName }
    });
  }

  // Create a friend accepted notification
  static async createFriendAcceptedNotification(
    userId: number,
    friendName: string,
    friendId: number
  ) {
    return await storage.createNotification({
      userId,
      type: 'friendAccepted',
      title: 'âœ… ØªÙ… Ù‚Ø¨ÙˆÙ„ Ø·Ù„Ø¨ Ø§Ù„ØµØ¯Ø§Ù‚Ø©',
      message: `Ù‚Ø¨Ù„ ${friendName} Ø·Ù„Ø¨ ØµØ¯Ø§Ù‚ØªÙƒ`,
      data: { friendId, friendName }
    });
  }

  // Create a system notification
  static async createSystemNotification(
    userId: number,
    title: string,
    message: string,
    data?: any
  ) {
    return await storage.createNotification({
      userId,
      type: 'system',
      title,
      message,
      data
    });
  }

  // Create a message notification
  static async createMessageNotification(
    userId: number,
    senderName: string,
    senderId: number,
    messagePreview: string
  ) {
    return await storage.createNotification({
      userId,
      type: 'message',
      title: `Ø±Ø³Ø§Ù„Ø© Ù…Ù† ${senderName}`,
      message: messagePreview.length > 50 
        ? messagePreview.substring(0, 50) + '...'
        : messagePreview,
      data: { senderId, senderName }
    });
  }

  // Create a moderation notification
  static async createModerationNotification(
    userId: number,
    action: string,
    reason: string,
    moderatorName: string,
    duration?: number
  ) {
    let title = '';
    let message = '';

    switch (action) {
      case 'mute':
        title = 'ØªÙ… ÙƒØªÙ…Ùƒ';
        message = duration 
          ? `ØªÙ… ÙƒØªÙ…Ùƒ Ù„Ù…Ø¯Ø© ${duration} Ø¯Ù‚ÙŠÙ‚Ø©. Ø§Ù„Ø³Ø¨Ø¨: ${reason}`
          : `ØªÙ… ÙƒØªÙ…Ùƒ. Ø§Ù„Ø³Ø¨Ø¨: ${reason}`;
        break;
      case 'kick':
        title = 'ØªÙ… Ø·Ø±Ø¯Ùƒ';
        message = duration 
          ? `ØªÙ… Ø·Ø±Ø¯Ùƒ Ù„Ù…Ø¯Ø© ${duration} Ø¯Ù‚ÙŠÙ‚Ø©. Ø§Ù„Ø³Ø¨Ø¨: ${reason}`
          : `ØªÙ… Ø·Ø±Ø¯Ùƒ. Ø§Ù„Ø³Ø¨Ø¨: ${reason}`;
        break;
      case 'ban':
        title = 'ØªÙ… Ø­Ø¸Ø±Ùƒ';
        message = `ØªÙ… Ø­Ø¸Ø±Ùƒ Ù…Ù† Ø§Ù„Ù…ÙˆÙ‚Ø¹. Ø§Ù„Ø³Ø¨Ø¨: ${reason}`;
        break;
      default:
        title = 'Ø¥Ø¬Ø±Ø§Ø¡ Ø¥Ø¯Ø§Ø±ÙŠ';
        message = `ØªÙ… Ø§ØªØ®Ø§Ø° Ø¥Ø¬Ø±Ø§Ø¡ Ø¥Ø¯Ø§Ø±ÙŠ Ø¶Ø¯Ùƒ. Ø§Ù„Ø³Ø¨Ø¨: ${reason}`;
    }

    return await storage.createNotification({
      userId,
      type: 'moderation',
      title,
      message,
      data: { action, reason, moderatorName, duration }
    });
  }

  // Create a promotion notification
  static async createPromotionNotification(
    userId: number,
    newRole: string,
    promotedBy: string
  ) {
    return await storage.createNotification({
      userId,
      type: 'promotion',
      title: 'ØªÙ‡Ø§Ù†ÙŠÙ†Ø§! ØªÙ…Øª ØªØ±Ù‚ÙŠØªÙƒ',
      message: `ØªÙ…Øª ØªØ±Ù‚ÙŠØªÙƒ Ø¥Ù„Ù‰ ${newRole} Ù…Ù† Ù‚Ø¨Ù„ ${promotedBy}`,
      data: { newRole, promotedBy }
    });
  }
}

// Export individual functions for easier importing
export const {
  createFriendRequestNotification,
  createFriendAcceptedNotification,
  createSystemNotification,
  createMessageNotification,
  createModerationNotification,
  createPromotionNotification
} = NotificationHelpers;