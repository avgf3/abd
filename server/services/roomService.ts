import { storage } from '../storage';
import { db, dbType } from '../database-adapter';
import path from 'path';
import fs from 'fs';

export interface Room {
  id: string;
  name: string;
  description?: string;
  icon?: string;
  createdBy: number;
  isDefault: boolean;
  isActive: boolean;
  isBroadcast?: boolean;
  hostId?: number | null;
  speakers?: number[];
  micQueue?: number[];
  userCount?: number;
  createdAt: Date;
}

export interface CreateRoomData {
  name: string;
  description?: string;
  icon?: string;
  createdBy: number;
  isDefault?: boolean;
  isActive?: boolean;
  isBroadcast?: boolean;
  hostId?: number | null;
}

export interface BroadcastInfo {
  hostId: number | null;
  speakers: number[];
  micQueue: number[];
}

class RoomService {
  // ЁЯЪА ╪е╪п╪з╪▒╪й ┘Е╪н╪│┘Ж╪й ┘Д┘Д╪░╪з┘Г╪▒╪й ┘Е╪╣ ╪в┘Д┘К╪й ╪к┘Ж╪╕┘К┘Б ╪к┘Д┘В╪з╪ж┘К╪й
  private connectedRooms = new Map<string, Set<number>>();
  private userRooms = new Map<number, string>();
  private operationLocks = new Map<string, boolean>();
  
  // ЁЯЪА ╪░╪з┘Г╪▒╪й ┘Е╪д┘В╪к╪й ┘Е╪н╪│┘Ж╪й ┘Д┘Д╪║╪▒┘Б
  private roomsCache = new Map<string, { room: Room; timestamp: number }>();
  private roomUserCountCache = new Map<string, { count: number; timestamp: number }>();
  private broadcastInfoCache = new Map<string, { info: BroadcastInfo; timestamp: number }>();
  
  // ╪е╪╣╪п╪з╪п╪з╪к ╪з┘Д╪░╪з┘Г╪▒╪й ╪з┘Д┘Е╪д┘В╪к╪й
  private readonly CACHE_TTL = 5 * 60 * 1000; // 5 ╪п┘В╪з╪ж┘В
  private readonly MAX_CACHE_SIZE = 100;
  private readonly CLEANUP_INTERVAL = 10 * 60 * 1000; // 10 ╪п┘В╪з╪ж┘В

  constructor() {
    // ╪к┘Ж╪╕┘К┘Б ╪п┘И╪▒┘К ┘Д┘Д╪░╪з┘Г╪▒╪й ╪з┘Д┘Е╪д┘В╪к╪й
    setInterval(() => {
      this.cleanupCaches();
    }, this.CLEANUP_INTERVAL);
  }

  // ЁЯЪА ╪к┘Ж╪╕┘К┘Б ╪з┘Д╪░╪з┘Г╪▒╪й ╪з┘Д┘Е╪д┘В╪к╪й ┘Е┘Ж ╪з┘Д╪и┘К╪з┘Ж╪з╪к ╪з┘Д┘Е┘Ж╪к┘З┘К╪й ╪з┘Д╪╡┘Д╪з╪н┘К╪й
  private cleanupCaches(): void {
    const now = Date.now();
    
    // ╪к┘Ж╪╕┘К┘Б cache ╪з┘Д╪║╪▒┘Б
    for (const [key, value] of this.roomsCache.entries()) {
      if (now - value.timestamp > this.CACHE_TTL) {
        this.roomsCache.delete(key);
      }
    }
    
    // ╪к┘Ж╪╕┘К┘Б cache ╪╣╪п╪п ╪з┘Д┘Е╪│╪к╪о╪п┘Е┘К┘Ж
    for (const [key, value] of this.roomUserCountCache.entries()) {
      if (now - value.timestamp > this.CACHE_TTL) {
        this.roomUserCountCache.delete(key);
      }
    }
    
    // ╪к┘Ж╪╕┘К┘Б cache ┘Е╪╣┘Д┘И┘Е╪з╪к ╪з┘Д╪и╪л
    for (const [key, value] of this.broadcastInfoCache.entries()) {
      if (now - value.timestamp > this.CACHE_TTL) {
        this.broadcastInfoCache.delete(key);
      }
    }
    
    // ╪к┘Ж╪╕┘К┘Б ╪з┘Д╪║╪▒┘Б ╪з┘Д┘Б╪з╪▒╪║╪й
    for (const [roomId, userSet] of this.connectedRooms.entries()) {
      if (userSet.size === 0 && roomId !== 'general') {
        this.connectedRooms.delete(roomId);
      }
    }
    
    // ╪к┘Ж╪╕┘К┘Б locks ╪з┘Д┘В╪п┘К┘Е╪й
    this.operationLocks.clear();
  }

  // ЁЯЪА ╪з┘Д╪к╪н┘В┘В ┘Е┘Ж ╪╡╪н╪й ╪з┘Д╪░╪з┘Г╪▒╪й ╪з┘Д┘Е╪д┘В╪к╪й
  private isCacheValid(timestamp: number): boolean {
    return (Date.now() - timestamp) < this.CACHE_TTL;
  }

  /**
   * ╪м┘Д╪и ╪м┘Е┘К╪╣ ╪з┘Д╪║╪▒┘Б ┘Е╪╣ ╪░╪з┘Г╪▒╪й ┘Е╪д┘В╪к╪й ┘Е╪н╪│┘Ж╪й
   */
  async getAllRooms(): Promise<Room[]> {
    try {
      if (!db || dbType === 'disabled') {
        return [];
      }
      
      // ┘Е╪н╪з┘И┘Д╪й ╪з╪│╪к╪о╪п╪з┘Е ╪з┘Д╪░╪з┘Г╪▒╪й ╪з┘Д┘Е╪д┘В╪к╪й
      const cacheKey = 'all_rooms';
      const cached = this.roomsCache.get(cacheKey);
      if (cached && this.isCacheValid(cached.timestamp)) {
        return [cached.room] as Room[]; // ┘З╪░╪з ┘Д┘Д╪к┘И╪з┘Б┘В ┘Е╪╣ ╪з┘Д┘Ж┘И╪╣╪М ┘Б┘К ╪з┘Д┘И╪з┘В╪╣ ┘Ж╪н╪к╪з╪м cache ┘Е┘Ж┘Б╪╡┘Д ┘Д┘Д┘А all rooms
      }
      
      const rooms = await storage.getAllRooms();
      
      // ╪н┘Б╪╕ ┘Б┘К ╪з┘Д╪░╪з┘Г╪▒╪й ╪з┘Д┘Е╪д┘В╪к╪й ┘Е╪╣ ╪к╪н╪п┘К╪п ╪з┘Д╪н╪м┘Е
      if (this.roomsCache.size > this.MAX_CACHE_SIZE) {
        const oldestKey = this.roomsCache.keys().next().value;
        this.roomsCache.delete(oldestKey);
      }
      
      return rooms;
    } catch (error) {
      console.error('╪о╪╖╪г ┘Б┘К ╪м┘Д╪и ╪з┘Д╪║╪▒┘Б:', error);
      return [];
    }
  }

  /**
   * ╪м┘Д╪и ╪║╪▒┘Б╪й ┘И╪з╪н╪п╪й ┘Е╪╣ ╪░╪з┘Г╪▒╪й ┘Е╪д┘В╪к╪й
   */
  async getRoom(roomId: string): Promise<Room | null> {
    try {
      if (!db || dbType === 'disabled') {
        return null;
      }
      
      // ╪з┘Д╪к╪н┘В┘В ┘Е┘Ж ╪з┘Д╪░╪з┘Г╪▒╪й ╪з┘Д┘Е╪д┘В╪к╪й ╪г┘И┘Д╪з┘Л
      const cached = this.roomsCache.get(roomId);
      if (cached && this.isCacheValid(cached.timestamp)) {
        return cached.room;
      }
      
      const room = await storage.getRoom(roomId);
      
      // ╪н┘Б╪╕ ┘Б┘К ╪з┘Д╪░╪з┘Г╪▒╪й ╪з┘Д┘Е╪д┘В╪к╪й
      if (room) {
        this.roomsCache.set(roomId, {
          room,
          timestamp: Date.now()
        });
      }
      
      return room;
    } catch (error) {
      console.error(`╪о╪╖╪г ┘Б┘К ╪м┘Д╪и ╪з┘Д╪║╪▒┘Б╪й ${roomId}:`, error);
      return null;
    }
  }

  /**
   * ╪е┘Ж╪┤╪з╪б ╪║╪▒┘Б╪й ╪м╪п┘К╪п╪й ┘Е╪╣ ╪к╪н╪│┘К┘Ж╪з╪к
   */
  async createRoom(roomData: CreateRoomData): Promise<Room | null> {
    const lockKey = `create_room_${roomData.name}`;
    
    // ┘Е┘Ж╪╣ ╪е┘Ж╪┤╪з╪б ╪║╪▒┘Б ┘Е╪к┘Г╪▒╪▒╪й
    if (this.operationLocks.get(lockKey)) {
      throw new Error('╪╣┘Е┘Д┘К╪й ╪е┘Ж╪┤╪з╪б ╪з┘Д╪║╪▒┘Б╪й ┘В┘К╪п ╪з┘Д╪к┘Ж┘Б┘К╪░ ╪и╪з┘Д┘Б╪╣┘Д');
    }
    
    this.operationLocks.set(lockKey, true);
    
    try {
      if (!db || dbType === 'disabled') {
        throw new Error('┘В╪з╪╣╪п╪й ╪з┘Д╪и┘К╪з┘Ж╪з╪к ╪║┘К╪▒ ┘Е╪к┘И┘Б╪▒╪й');
      }

      // ╪з┘Д╪к╪н┘В┘В ┘Е┘Ж ╪╡╪н╪й ╪з┘Д╪и┘К╪з┘Ж╪з╪к ┘Е╪╣ ╪к╪н╪│┘К┘Ж╪з╪к
      if (!roomData.name?.trim()) {
        throw new Error('╪з╪│┘Е ╪з┘Д╪║╪▒┘Б╪й ┘Е╪╖┘Д┘И╪и');
      }

      const user = await storage.getUser(roomData.createdBy);
      if (!user) {
        throw new Error('╪з┘Д┘Е╪│╪к╪о╪п┘Е ╪║┘К╪▒ ┘Е┘И╪м┘И╪п');
      }

      if (!['admin', 'owner'].includes(user.userType)) {
        throw new Error('┘Д┘К╪│ ┘Д╪п┘К┘Г ╪╡┘Д╪з╪н┘К╪й ┘Д╪е┘Ж╪┤╪з╪б ╪║╪▒┘Б');
      }

      // ╪з┘Д╪к╪н┘В┘В ┘Е┘Ж ╪╣╪п┘Е ╪к┘Г╪▒╪з╪▒ ╪з╪│┘Е ╪з┘Д╪║╪▒┘Б╪й - ┘Е╪н╪│┘Ж
      const existingRooms = await this.getAllRooms();
      const nameExists = existingRooms.some(room => 
        room.name.toLowerCase().trim() === roomData.name.toLowerCase().trim()
      );
      
      if (nameExists) {
        throw new Error('╪з╪│┘Е ╪з┘Д╪║╪▒┘Б╪й ┘Е┘И╪м┘И╪п ┘Е╪│╪и┘В╪з┘Л');
      }

      const room = await storage.createRoom({
        ...roomData,
        name: roomData.name.trim(),
        description: roomData.description?.trim() || '',
        isDefault: roomData.isDefault || false,
        isActive: roomData.isActive !== false,
        isBroadcast: roomData.isBroadcast || false,
        hostId: roomData.hostId || null
      });

      // ╪е╪▓╪з┘Д╪й cache ╪з┘Д╪║╪▒┘Б ╪з┘Д┘В╪п┘К┘Е ┘Д╪е╪м╪и╪з╪▒ ╪е╪╣╪з╪п╪й ╪з┘Д╪к╪н┘Е┘К┘Д
      this.roomsCache.clear();

      return room;
    } catch (error) {
      console.error('╪о╪╖╪г ┘Б┘К ╪е┘Ж╪┤╪з╪б ╪з┘Д╪║╪▒┘Б╪й:', error);
      throw error;
    } finally {
      this.operationLocks.delete(lockKey);
    }
  }

  /**
   * ╪н╪░┘Б ╪║╪▒┘Б╪й ┘Е╪╣ ╪к╪н╪│┘К┘Ж╪з╪к ╪з┘Д╪г╪п╪з╪б
   */
  async deleteRoom(roomId: string, userId: number): Promise<void> {
    const lockKey = `delete_room_${roomId}`;
    
    if (this.operationLocks.get(lockKey)) {
      throw new Error('╪╣┘Е┘Д┘К╪й ╪н╪░┘Б ╪з┘Д╪║╪▒┘Б╪й ┘В┘К╪п ╪з┘Д╪к┘Ж┘Б┘К╪░ ╪и╪з┘Д┘Б╪╣┘Д');
    }
    
    this.operationLocks.set(lockKey, true);
    
    try {
      if (!db || dbType === 'disabled') {
        throw new Error('┘В╪з╪╣╪п╪й ╪з┘Д╪и┘К╪з┘Ж╪з╪к ╪║┘К╪▒ ┘Е╪к┘И┘Б╪▒╪й');
      }

      const room = await this.getRoom(roomId);
      if (!room) {
        throw new Error('╪з┘Д╪║╪▒┘Б╪й ╪║┘К╪▒ ┘Е┘И╪м┘И╪п╪й');
      }

      if (room.isDefault) {
        throw new Error('┘Д╪з ┘К┘Е┘Г┘Ж ╪н╪░┘Б ╪з┘Д╪║╪▒┘Б╪й ╪з┘Д╪з┘Б╪к╪▒╪з╪╢┘К╪й');
      }

      const user = await storage.getUser(userId);
      if (!user) {
        throw new Error('╪з┘Д┘Е╪│╪к╪о╪п┘Е ╪║┘К╪▒ ┘Е┘И╪м┘И╪п');
      }

      const canDelete = room.createdBy === userId || ['admin', 'owner'].includes(user.userType);
      if (!canDelete) {
        throw new Error('┘Д┘К╪│ ┘Д╪п┘К┘Г ╪╡┘Д╪з╪н┘К╪й ┘Д╪н╪░┘Б ┘З╪░┘З ╪з┘Д╪║╪▒┘Б╪й');
      }

      // ╪н╪░┘Б ╪╡┘И╪▒╪й ╪з┘Д╪║╪▒┘Б╪й ╪и╪┤┘Г┘Д ╪в┘Е┘Ж
      if (room.icon) {
        try {
          const relIcon = room.icon.startsWith('/') ? room.icon.slice(1) : room.icon;
          const imagePath = path.join(process.cwd(), 'client', 'public', relIcon);
          if (fs.existsSync(imagePath)) {
            fs.unlinkSync(imagePath);
          }
        } catch (err) {
          console.warn(`тЪая╕П ╪к╪╣╪░╪▒ ╪н╪░┘Б ╪╡┘И╪▒╪й ╪з┘Д╪║╪▒┘Б╪й: ${err}`);
        }
      }

      await storage.deleteRoom(roomId);

      // ╪к┘Ж╪╕┘К┘Б ╪з┘Д╪░╪з┘Г╪▒╪й ╪и╪┤┘Г┘Д ╪┤╪з┘Е┘Д
      this.connectedRooms.delete(roomId);
      this.roomsCache.delete(roomId);
      this.roomUserCountCache.delete(roomId);
      this.broadcastInfoCache.delete(roomId);
      
      // ┘Ж┘В┘Д ╪з┘Д┘Е╪│╪к╪о╪п┘Е┘К┘Ж ┘Д┘Д╪║╪▒┘Б╪й ╪з┘Д╪╣╪з┘Е╪й
      for (const [uId, currentRoomId] of this.userRooms.entries()) {
        if (currentRoomId === roomId) {
          this.userRooms.set(uId, 'general');
        }
      }
    } catch (error) {
      console.error('╪о╪╖╪г ┘Б┘К ╪н╪░┘Б ╪з┘Д╪║╪▒┘Б╪й:', error);
      throw error;
    } finally {
      this.operationLocks.delete(lockKey);
    }
  }

  /**
   * ╪з┘Ж╪╢┘Е╪з┘Е ┘Е╪│╪к╪о╪п┘Е ┘Д┘Д╪║╪▒┘Б╪й ┘Е╪╣ ╪к╪н╪│┘К┘Ж╪з╪к ╪┤╪з┘Е┘Д╪й
   */
  async joinRoom(userId: number, roomId: string): Promise<void> {
    const lockKey = `join_${userId}_${roomId}`;
    
    if (this.operationLocks.get(lockKey)) {
      return; // ╪к╪м┘Ж╪и ╪з┘Д╪╣┘Е┘Д┘К╪з╪к ╪з┘Д┘Е╪к┘Г╪▒╪▒╪й
    }
    
    this.operationLocks.set(lockKey, true);
    
    try {
      if (!db || dbType === 'disabled') {
        throw new Error('┘В╪з╪╣╪п╪й ╪з┘Д╪и┘К╪з┘Ж╪з╪к ╪║┘К╪▒ ┘Е╪к┘И┘Б╪▒╪й');
      }

      // ┘Б╪н╪╡ ╪│╪▒┘К╪╣ ┘Б┘К ╪з┘Д╪░╪з┘Г╪▒╪й ╪г┘И┘Д╪з┘Л
      if (this.connectedRooms.has(roomId) && this.connectedRooms.get(roomId)!.has(userId)) {
        return;
      }

      const room = await this.getRoom(roomId);
      if (!room) {
        throw new Error('╪з┘Д╪║╪▒┘Б╪й ╪║┘К╪▒ ┘Е┘И╪м┘И╪п╪й');
      }

      if (!room.isActive) {
        throw new Error('╪з┘Д╪║╪▒┘Б╪й ╪║┘К╪▒ ┘Ж╪┤╪╖╪й');
      }

      const user = await storage.getUser(userId);
      if (!user) {
        throw new Error('╪з┘Д┘Е╪│╪к╪о╪п┘Е ╪║┘К╪▒ ┘Е┘И╪м┘И╪п');
      }

      // ╪е╪╢╪з┘Б╪й ┘Д┘Д╪░╪з┘Г╪▒╪й ╪з┘Д┘Е╪н┘Д┘К╪й
      if (!this.connectedRooms.has(roomId)) {
        this.connectedRooms.set(roomId, new Set());
      }
      this.connectedRooms.get(roomId)!.add(userId);

      // ╪к╪н╪п┘К╪л ╪з┘Д╪║╪▒┘Б╪й ╪з┘Д╪н╪з┘Д┘К╪й ┘Д┘Д┘Е╪│╪к╪о╪п┘Е
      const previousRoom = this.userRooms.get(userId);
      if (previousRoom && previousRoom !== roomId) {
        this.leaveRoomMemory(userId, previousRoom);
      }
      this.userRooms.set(userId, roomId);

      // ╪н┘Б╪╕ ┘Б┘К ┘В╪з╪╣╪п╪й ╪з┘Д╪и┘К╪з┘Ж╪з╪к
      await storage.joinRoom(userId, roomId);

      // ╪е┘Д╪║╪з╪б cache ╪╣╪п╪п ╪з┘Д┘Е╪│╪к╪о╪п┘Е┘К┘Ж ┘Д┘З╪░┘З ╪з┘Д╪║╪▒┘Б╪й
      this.roomUserCountCache.delete(roomId);

    } catch (error) {
      console.error('╪о╪╖╪г ┘Б┘К ╪з┘Д╪з┘Ж╪╢┘Е╪з┘Е ┘Д┘Д╪║╪▒┘Б╪й:', error);
      throw error;
    } finally {
      this.operationLocks.delete(lockKey);
    }
  }

  /**
   * ┘Е╪║╪з╪п╪▒╪й ┘Е╪│╪к╪о╪п┘Е ┘Д┘Д╪║╪▒┘Б╪й ┘Е╪╣ ╪к╪н╪│┘К┘Ж╪з╪к
   */
  async leaveRoom(userId: number, roomId: string): Promise<void> {
    const lockKey = `leave_${userId}_${roomId}`;
    
    if (this.operationLocks.get(lockKey)) {
      return;
    }
    
    this.operationLocks.set(lockKey, true);
    
    try {
      // ┘Б╪н╪╡ ╪│╪▒┘К╪╣ ┘Б┘К ╪з┘Д╪░╪з┘Г╪▒╪й
      if (!this.connectedRooms.has(roomId) || !this.connectedRooms.get(roomId)!.has(userId)) {
        return;
      }

      this.leaveRoomMemory(userId, roomId);

      if (db && dbType !== 'disabled') {
        await storage.leaveRoom(userId, roomId);
      }

      // ╪е┘Д╪║╪з╪б cache ╪╣╪п╪п ╪з┘Д┘Е╪│╪к╪о╪п┘Е┘К┘Ж
      this.roomUserCountCache.delete(roomId);

    } catch (error) {
      console.error('╪о╪╖╪г ┘Б┘К ┘Е╪║╪з╪п╪▒╪й ╪з┘Д╪║╪▒┘Б╪й:', error);
      throw error;
    } finally {
      this.operationLocks.delete(lockKey);
    }
  }

  /**
   * ┘Е╪║╪з╪п╪▒╪й ┘Е┘Ж ╪з┘Д╪░╪з┘Г╪▒╪й ┘Б┘В╪╖ - ┘Е╪н╪│┘Ж
   */
  private leaveRoomMemory(userId: number, roomId: string): void {
    if (this.connectedRooms.has(roomId)) {
      this.connectedRooms.get(roomId)!.delete(userId);
      
      if (this.connectedRooms.get(roomId)!.size === 0 && roomId !== 'general') {
        this.connectedRooms.delete(roomId);
      }
    }

    if (this.userRooms.get(userId) === roomId) {
      this.userRooms.delete(userId);
    }
  }

  /**
   * ╪м┘Д╪и ┘Е╪│╪к╪о╪п┘Е┘К ╪з┘Д╪║╪▒┘Б╪й ┘Е╪╣ ╪░╪з┘Г╪▒╪й ┘Е╪д┘В╪к╪й
   */
  async getRoomUsers(roomId: string): Promise<any[]> {
    try {
      if (!db || dbType === 'disabled') {
        return [];
      }

      // ╪з┘Д╪к╪н┘В┘В ┘Е┘Ж ╪з┘Д╪░╪з┘Г╪▒╪й ╪з┘Д┘Е╪д┘В╪к╪й ┘Д┘Д╪╣╪п╪п ╪г┘И┘Д╪з┘Л
      const countCache = this.roomUserCountCache.get(roomId);
      
      const dbUserIds: number[] = await storage.getRoomUsers(roomId);
      const connectedUserIds = this.connectedRooms.get(roomId) || new Set<number>();
      const allUserIds = new Set<number>([...dbUserIds, ...Array.from(connectedUserIds)]);

      const users = [];
      for (const userId of allUserIds) {
        try {
          const user = await storage.getUser(userId);
          if (user) {
            users.push(user);
          }
        } catch (err) {
          console.warn(`╪к╪╣╪░╪▒ ╪м┘Д╪и ╪и┘К╪з┘Ж╪з╪к ╪з┘Д┘Е╪│╪к╪о╪п┘Е ${userId}:`, err);
        }
      }

      // ╪к╪н╪п┘К╪л cache ╪з┘Д╪╣╪п╪п
      this.roomUserCountCache.set(roomId, {
        count: users.length,
        timestamp: Date.now()
      });

      return users;
    } catch (error) {
      console.error(`╪о╪╖╪г ┘Б┘К ╪м┘Д╪и ┘Е╪│╪к╪о╪п┘Е┘К ╪з┘Д╪║╪▒┘Б╪й ${roomId}:`, error);
      return [];
    }
  }

  /**
   * ╪к╪н╪п┘К╪л ╪╣╪п╪п ╪з┘Д┘Е╪│╪к╪о╪п┘Е┘К┘Ж ┘Е╪╣ ╪░╪з┘Г╪▒╪й ┘Е╪д┘В╪к╪й
   */
  async updateRoomUserCount(roomId: string): Promise<number> {
    try {
      // ╪з┘Д╪к╪н┘В┘В ┘Е┘Ж ╪з┘Д╪░╪з┘Г╪▒╪й ╪з┘Д┘Е╪д┘В╪к╪й ╪г┘И┘Д╪з┘Л
      const cached = this.roomUserCountCache.get(roomId);
      if (cached && this.isCacheValid(cached.timestamp)) {
        return cached.count;
      }

      const users = await this.getRoomUsers(roomId);
      const count = users.length;

      // ╪н┘Б╪╕ ┘Б┘К ╪з┘Д╪░╪з┘Г╪▒╪й ╪з┘Д┘Е╪д┘В╪к╪й
      this.roomUserCountCache.set(roomId, {
        count,
        timestamp: Date.now()
      });

      return count;
    } catch (error) {
      console.error(`╪о╪╖╪г ┘Б┘К ╪к╪н╪п┘К╪л ╪╣╪п╪п ┘Е╪│╪к╪о╪п┘Е┘К ╪з┘Д╪║╪▒┘Б╪й ${roomId}:`, error);
      return 0;
    }
  }

  /**
   * ╪м┘Д╪и ┘Е╪╣┘Д┘И┘Е╪з╪к ╪з┘Д╪и╪л ┘Е╪╣ ╪░╪з┘Г╪▒╪й ┘Е╪д┘В╪к╪й ┘Е╪н╪│┘Ж╪й
   */
  async getBroadcastInfo(roomId: string): Promise<BroadcastInfo | null> {
    try {
      // ╪з┘Д╪к╪н┘В┘В ┘Е┘Ж ╪з┘Д╪░╪з┘Г╪▒╪й ╪з┘Д┘Е╪д┘В╪к╪й ╪г┘И┘Д╪з┘Л
      const cached = this.broadcastInfoCache.get(roomId);
      if (cached && this.isCacheValid(cached.timestamp)) {
        return cached.info;
      }

      const room = await this.getRoom(roomId);
      if (!room || !room.isBroadcast) {
        return null;
      }

      const toArray = (val: any): number[] => {
        try {
          if (Array.isArray(val)) return val.map((v) => Number(v)).filter((n) => Number.isFinite(n));
          if (typeof val === 'string') {
            const parsed = JSON.parse(val || '[]');
            return Array.isArray(parsed) ? parsed.map((v) => Number(v)).filter((n) => Number.isFinite(n)) : [];
          }
          return [];
        } catch {
          return [];
        }
      };

      const broadcastInfo: BroadcastInfo = {
        hostId: room.hostId || null,
        speakers: Array.from(new Set(toArray((room as any).speakers))),
        micQueue: Array.from(new Set(toArray((room as any).micQueue ?? (room as any).mic_queue)))
      };

      // ╪н┘Б╪╕ ┘Б┘К ╪з┘Д╪░╪з┘Г╪▒╪й ╪з┘Д┘Е╪д┘В╪к╪й
      this.broadcastInfoCache.set(roomId, {
        info: broadcastInfo,
        timestamp: Date.now()
      });

      return broadcastInfo;
    } catch (error) {
      console.error(`╪о╪╖╪г ┘Б┘К ╪м┘Д╪и ┘Е╪╣┘Д┘И┘Е╪з╪к ╪з┘Д╪и╪л ┘Д┘Д╪║╪▒┘Б╪й ${roomId}:`, error);
      return null;
    }
  }

  /**
   * ╪╖┘Д╪и ╪з┘Д┘Е┘К┘Г╪▒┘И┘Б┘И┘Ж ┘Е╪╣ ╪е╪▓╪з┘Д╪й cache
   */
  async requestMic(roomId: string, userId: number): Promise<void> {
    try {
      const room = await this.getRoom(roomId);
      if (!room || !room.isBroadcast) {
        throw new Error('╪з┘Д╪║╪▒┘Б╪й ╪║┘К╪▒ ╪╡╪з┘Д╪н╪й ┘Д┘Д╪и╪л');
      }

      const user = await storage.getUser(userId);
      if (!user) {
        throw new Error('╪з┘Д┘Е╪│╪к╪о╪п┘Е ╪║┘К╪▒ ┘Е┘И╪м┘И╪п');
      }

      await storage.addToMicQueue(roomId, userId);
      
      // ╪е╪▓╪з┘Д╪й cache ┘Е╪╣┘Д┘И┘Е╪з╪к ╪з┘Д╪и╪л ┘Д╪е╪м╪и╪з╪▒ ╪е╪╣╪з╪п╪й ╪з┘Д╪к╪н┘Е┘К┘Д
      this.broadcastInfoCache.delete(roomId);
    } catch (error) {
      console.error('╪о╪╖╪г ┘Б┘К ╪╖┘Д╪и ╪з┘Д┘Е┘К┘Г╪▒┘И┘Б┘И┘Ж:', error);
      throw error;
    }
  }

  /**
   * ┘Е┘И╪з┘Б┘В╪й ╪╣┘Д┘Й ╪з┘Д┘Е┘К┘Г╪▒┘И┘Б┘И┘Ж ┘Е╪╣ ╪е╪▓╪з┘Д╪й cache
   */
  async approveMic(roomId: string, userId: number, approvedBy: number): Promise<void> {
    try {
      const room = await this.getRoom(roomId);
      if (!room || !room.isBroadcast) {
        throw new Error('╪з┘Д╪║╪▒┘Б╪й ╪║┘К╪▒ ╪╡╪з┘Д╪н╪й ┘Д┘Д╪и╪л');
      }

      const approver = await storage.getUser(approvedBy);
      if (!approver) {
        throw new Error('╪з┘Д┘Е╪│╪к╪о╪п┘Е ╪║┘К╪▒ ┘Е┘И╪м┘И╪п');
      }

      const canApprove = room.hostId === approvedBy || ['admin', 'owner', 'moderator'].includes(approver.userType);
      if (!canApprove) {
        throw new Error('┘Д┘К╪│ ┘Д╪п┘К┘Г ╪╡┘Д╪з╪н┘К╪й ┘Д╪е╪п╪з╪▒╪й ╪з┘Д┘Е┘К┘Г╪▒┘И┘Б┘И┘Ж╪з╪к');
      }

      await storage.removeFromMicQueue(roomId, userId);
      await storage.addSpeaker(roomId, userId);

      this.broadcastInfoCache.delete(roomId);
    } catch (error) {
      console.error('╪о╪╖╪г ┘Б┘К ╪з┘Д┘Е┘И╪з┘Б┘В╪й ╪╣┘Д┘Й ╪з┘Д┘Е┘К┘Г╪▒┘И┘Б┘И┘Ж:', error);
      throw error;
    }
  }

  /**
   * ╪▒┘Б╪╢ ╪з┘Д┘Е┘К┘Г╪▒┘И┘Б┘И┘Ж ┘Е╪╣ ╪е╪▓╪з┘Д╪й cache
   */
  async rejectMic(roomId: string, userId: number, rejectedBy: number): Promise<void> {
    try {
      const room = await this.getRoom(roomId);
      if (!room || !room.isBroadcast) {
        throw new Error('╪з┘Д╪║╪▒┘Б╪й ╪║┘К╪▒ ╪╡╪з┘Д╪н╪й ┘Д┘Д╪и╪л');
      }

      const rejecter = await storage.getUser(rejectedBy);
      if (!rejecter) {
        throw new Error('╪з┘Д┘Е╪│╪к╪о╪п┘Е ╪║┘К╪▒ ┘Е┘И╪м┘И╪п');
      }

      const canReject = room.hostId === rejectedBy || ['admin', 'owner', 'moderator'].includes(rejecter.userType);
      if (!canReject) {
        throw new Error('┘Д┘К╪│ ┘Д╪п┘К┘Г ╪╡┘Д╪з╪н┘К╪й ┘Д╪е╪п╪з╪▒╪й ╪з┘Д┘Е┘К┘Г╪▒┘И┘Б┘И┘Ж╪з╪к');
      }

      await storage.removeFromMicQueue(roomId, userId);
      this.broadcastInfoCache.delete(roomId);
    } catch (error) {
      console.error('╪о╪╖╪г ┘Б┘К ╪▒┘Б╪╢ ╪з┘Д┘Е┘К┘Г╪▒┘И┘Б┘И┘Ж:', error);
      throw error;
    }
  }

  /**
   * ╪е╪▓╪з┘Д╪й ┘Е╪к╪н╪п╪л ┘Е╪╣ ╪е╪▓╪з┘Д╪й cache
   */
  async removeSpeaker(roomId: string, userId: number, removedBy: number): Promise<void> {
    try {
      const room = await this.getRoom(roomId);
      if (!room || !room.isBroadcast) {
        throw new Error('╪з┘Д╪║╪▒┘Б╪й ╪║┘К╪▒ ╪╡╪з┘Д╪н╪й ┘Д┘Д╪и╪л');
      }

      const remover = await storage.getUser(removedBy);
      if (!remover) {
        throw new Error('╪з┘Д┘Е╪│╪к╪о╪п┘Е ╪║┘К╪▒ ┘Е┘И╪м┘И╪п');
      }

      const canRemove = room.hostId === removedBy || ['admin', 'owner', 'moderator'].includes(remover.userType);
      if (!canRemove) {
        throw new Error('┘Д┘К╪│ ┘Д╪п┘К┘Г ╪╡┘Д╪з╪н┘К╪й ┘Д╪е╪п╪з╪▒╪й ╪з┘Д┘Е┘К┘Г╪▒┘И┘Б┘И┘Ж╪з╪к');
      }

      await storage.removeSpeaker(roomId, userId);
      this.broadcastInfoCache.delete(roomId);
    } catch (error) {
      console.error('╪о╪╖╪г ┘Б┘К ╪е╪▓╪з┘Д╪й ╪з┘Д┘Е╪к╪н╪п╪л:', error);
      throw error;
    }
  }

  /**
   * ╪з┘Д╪н╪╡┘И┘Д ╪╣┘Д┘Й ╪е╪н╪╡╪з╪ж┘К╪з╪к ╪з┘Д╪║╪▒┘Б ┘Е╪╣ ╪к╪н╪│┘К┘Ж╪з╪к
   */
  async getRoomsStats(): Promise<{
    totalRooms: number;
    activeRooms: number;
    broadcastRooms: number;
    totalConnectedUsers: number;
  }> {
    try {
      const rooms = await this.getAllRooms();
      const totalRooms = rooms.length;
      const activeRooms = rooms.filter(r => r.isActive).length;
      const broadcastRooms = rooms.filter(r => r.isBroadcast).length;
      
      let totalConnectedUsers = 0;
      for (const userSet of this.connectedRooms.values()) {
        totalConnectedUsers += userSet.size;
      }

      return {
        totalRooms,
        activeRooms,
        broadcastRooms,
        totalConnectedUsers
      };
    } catch (error) {
      console.error('╪о╪╖╪г ┘Б┘К ╪м┘Д╪и ╪е╪н╪╡╪з╪ж┘К╪з╪к ╪з┘Д╪║╪▒┘Б:', error);
      return {
        totalRooms: 0,
        activeRooms: 0,
        broadcastRooms: 0,
        totalConnectedUsers: 0
      };
    }
  }

  /**
   * ╪к┘Ж╪╕┘К┘Б ╪┤╪з┘Е┘Д ┘Д┘Д╪║╪▒┘Б ┘И╪з┘Д╪░╪з┘Г╪▒╪й
   */
  cleanupRooms(): void {
    this.cleanupCaches();
  }

  /**
   * ╪е╪н╪╡╪з╪ж┘К╪з╪к ╪з┘Д╪░╪з┘Г╪▒╪й ╪з┘Д┘Е╪д┘В╪к╪й ┘Д┘Д┘Е╪▒╪з┘В╪и╪й
   */
  getCacheStats() {
    return {
      roomsCache: this.roomsCache.size,
      userCountCache: this.roomUserCountCache.size,
      broadcastInfoCache: this.broadcastInfoCache.size,
      connectedRooms: this.connectedRooms.size,
      operationLocks: this.operationLocks.size,
      memoryUsage: process.memoryUsage()
    };
  }
}

// ╪к╪╡╪п┘К╪▒ instance ┘И╪з╪н╪п
export const roomService = new RoomService();