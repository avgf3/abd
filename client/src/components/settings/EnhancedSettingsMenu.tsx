/**
 * ูุงุฆูุฉ ุฅุนุฏุงุฏุงุช ูุญุณูุฉ ููุทูุฑุฉ ูุน ุฅุฏุงุฑุฉ ุฃูุถู ููุฃุฎุทุงุก ูุงูุญุงูุฉ
 */

import React, { useState, useEffect } from 'react';
import { User, Home, Moon, Shield, LogOut, Settings, Palette, Brush, Download, Upload, RotateCcw, Info } from 'lucide-react';

import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { settingsManager, getSettings } from '@/utils/settingsManager';
import { getFinalUsernameColor, getUserListItemStyles } from '@/utils/themeUtils';

interface EnhancedSettingsMenuProps {
  onOpenProfile: () => void;
  onLogout: () => void;
  onClose: () => void;
  onOpenReports?: () => void;
  onOpenThemeSelector?: () => void;
  onOpenUsernameColorPicker?: () => void;
  onOpenIgnoredUsers?: () => void;
  currentUser?: any;
  className?: string;
}

export default function EnhancedSettingsMenu({
  onOpenProfile,
  onLogout,
  onClose,
  onOpenReports,
  onOpenThemeSelector,
  onOpenUsernameColorPicker,
  onOpenIgnoredUsers,
  currentUser,
  className = '',
}: EnhancedSettingsMenuProps) {
  const [settings, setSettings] = useState(getSettings());
  const [isExporting, setIsExporting] = useState(false);
  const [isImporting, setIsImporting] = useState(false);
  const { toast } = useToast();

  // ุชุญุฏูุซ ุงูุฅุนุฏุงุฏุงุช ุนูุฏ ุชุบููุฑ settingsManager
  useEffect(() => {
    const updateSettings = () => {
      setSettings(getSettings());
    };

    // ุชุญุฏูุซ ููุฑู
    updateSettings();

    // ูููู ุฅุถุงูุฉ ูุณุชูุน ููุฃุญุฏุงุซ ููุง ุฅุฐุง ูุงู ูุชุงุญุงู ูู settingsManager
    const interval = setInterval(updateSettings, 1000);
    return () => clearInterval(interval);
  }, []);

  const handleLogout = () => {
    if (confirm('๐ค ูู ุฃูุช ูุชุฃูุฏ ูู ุชุณุฌูู ุงูุฎุฑูุฌุ')) {
      onLogout();
    }
  };

  const handleExportSettings = async () => {
    setIsExporting(true);
    try {
      const settingsJson = settingsManager.exportSettings();
      
      // ุฅูุดุงุก ููู ููุชุญููู
      const blob = new Blob([settingsJson], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `settings-${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      toast({
        title: 'โ ุชู ุงูุชุตุฏูุฑ',
        description: 'ุชู ุชุตุฏูุฑ ุงูุฅุนุฏุงุฏุงุช ุจูุฌุงุญ',
      });
    } catch (error) {
      console.error('ุฎุทุฃ ูู ุชุตุฏูุฑ ุงูุฅุนุฏุงุฏุงุช:', error);
      toast({
        title: 'โ ุฎุทุฃ ูู ุงูุชุตุฏูุฑ',
        description: 'ูุดู ูู ุชุตุฏูุฑ ุงูุฅุนุฏุงุฏุงุช',
        variant: 'destructive',
      });
    } finally {
      setIsExporting(false);
    }
  };

  const handleImportSettings = async () => {
    setIsImporting(true);
    try {
      const input = document.createElement('input');
      input.type = 'file';
      input.accept = '.json';
      
      input.onchange = async (e) => {
        const file = (e.target as HTMLInputElement).files?.[0];
        if (!file) return;

        const text = await file.text();
        const success = settingsManager.importSettings(text);
        
        if (success) {
          setSettings(getSettings());
          toast({
            title: 'โ ุชู ุงูุงุณุชูุฑุงุฏ',
            description: 'ุชู ุงุณุชูุฑุงุฏ ุงูุฅุนุฏุงุฏุงุช ุจูุฌุงุญ',
          });
        } else {
          toast({
            title: 'โ ุฎุทุฃ ูู ุงูุงุณุชูุฑุงุฏ',
            description: 'ูุดู ูู ุงุณุชูุฑุงุฏ ุงูุฅุนุฏุงุฏุงุช - ุชุญูู ูู ุตุญุฉ ุงูููู',
            variant: 'destructive',
          });
        }
      };

      input.click();
    } catch (error) {
      console.error('ุฎุทุฃ ูู ุงุณุชูุฑุงุฏ ุงูุฅุนุฏุงุฏุงุช:', error);
      toast({
        title: 'โ ุฎุทุฃ ูู ุงูุงุณุชูุฑุงุฏ',
        description: 'ูุดู ูู ุงุณุชูุฑุงุฏ ุงูุฅุนุฏุงุฏุงุช',
        variant: 'destructive',
      });
    } finally {
      setIsImporting(false);
    }
  };

  const handleResetSettings = () => {
    if (confirm('๐จ ูู ุฃูุช ูุชุฃูุฏ ูู ุฅุนุงุฏุฉ ุชุนููู ุฌููุน ุงูุฅุนุฏุงุฏุงุชุ ุณูุชู ููุฏุงู ุฌููุน ุงูุชุฎุตูุตุงุช ุงูุญุงููุฉ.')) {
      const success = settingsManager.resetSettings();
      if (success) {
        setSettings(getSettings());
        toast({
          title: 'โ ุชู ุฅุนุงุฏุฉ ุงูุชุนููู',
          description: 'ุชู ุฅุนุงุฏุฉ ุชุนููู ุฌููุน ุงูุฅุนุฏุงุฏุงุช ููููู ุงูุงูุชุฑุงุถูุฉ',
        });
      } else {
        toast({
          title: 'โ ุฎุทุฃ ูู ุฅุนุงุฏุฉ ุงูุชุนููู',
          description: 'ูุดู ูู ุฅุนุงุฏุฉ ุชุนููู ุงูุฅุนุฏุงุฏุงุช',
          variant: 'destructive',
        });
      }
    }
  };

  return (
    <Card className={`fixed top-20 right-4 z-50 shadow-2xl animate-fade-in w-72 bg-card/95 backdrop-blur-md border-accent ${className}`}>
      <CardHeader className="pb-2">
        <CardTitle className="flex items-center gap-2 text-lg">
          <Settings className="w-5 h-5 text-primary" />
          ุงูุฅุนุฏุงุฏุงุช
          <Badge variant="outline" className="text-xs">
            v2.0
          </Badge>
        </CardTitle>
      </CardHeader>
      
      <CardContent className="p-0">
        {/* ูุนูููุงุช ุงููุณุชุฎุฏู */}
        {currentUser && (
          <div className="p-3 border-b border-border" style={getUserListItemStyles(currentUser)}>
            <div className="flex items-center gap-2">
              <User className="w-4 h-4" style={{ color: getFinalUsernameColor(currentUser) }} />
              <span className="font-semibold" style={{ color: getFinalUsernameColor(currentUser) }}>
                {currentUser.username}
              </span>
              <Badge variant="secondary" className="text-xs">
                {currentUser.userType === 'owner' ? 'ูุงูู' : 
                 currentUser.userType === 'admin' ? 'ูุดุฑู' : 'ุนุถู'}
              </Badge>
            </div>
            <div className="text-xs text-muted-foreground mt-1">
              ุงูุฌูุงุฒ: {settings.deviceId.split('-').pop()}
            </div>
          </div>
        )}

        {/* ุงููุณู ุงูุฃูู - ุงูููู ุงูุดุฎุตู */}
        <div className="p-3 border-b border-border">
          <Button
            onClick={onOpenProfile}
            variant="ghost"
            size="sm"
            className="w-full justify-start gap-3 h-9 hover:bg-accent/50 text-foreground"
          >
            <User className="w-4 h-4 text-primary" />
            ุงูููู ุงูุดุฎุตู
          </Button>
        </div>

        {/* ุงููุณู ุงูุซุงูู - ุงูุฅุนุฏุงุฏุงุช ุงูุนุงูุฉ */}
        <div className="p-3 border-b border-border space-y-1">
          <Button
            variant="ghost"
            size="sm"
            className="w-full justify-start gap-3 h-9 hover:bg-accent/50 text-foreground"
          >
            <Home className="w-4 h-4 text-primary" />
            ุงูุบุฑู
          </Button>

          {currentUser?.userType === 'owner' && (
            <Button
              onClick={onOpenThemeSelector}
              variant="ghost"
              size="sm"
              className="w-full justify-start gap-3 h-9 hover:bg-accent/50 text-foreground"
            >
              <Palette className="w-4 h-4 text-primary" />
              ุงุฎุชูุงุฑ ุงูุซูู
              <Badge variant="outline" className="ml-auto text-xs">
                {settings.theme}
              </Badge>
            </Button>
          )}

          <Button
            onClick={onOpenUsernameColorPicker}
            variant="ghost"
            size="sm"
            className="w-full justify-start gap-3 h-9 hover:bg-accent/50 text-foreground"
          >
            <Brush className="w-4 h-4 text-primary" />
            ููู ุงูุงุณู
          </Button>

          <Button
            onClick={onOpenIgnoredUsers}
            variant="ghost"
            size="sm"
            className="w-full justify-start gap-3 h-9 hover:bg-accent/50 text-foreground"
          >
            <Shield className="w-4 h-4 text-primary" />
            ูุงุฆูุฉ ุงููุชุฌุงูููู
          </Button>
        </div>

        {/* ุงููุณู ุงูุซุงูุซ - ุฅุฏุงุฑุฉ ุงูุฅุนุฏุงุฏุงุช */}
        <div className="p-3 border-b border-border space-y-1">
          <div className="text-xs text-muted-foreground mb-2 px-1">ุฅุฏุงุฑุฉ ุงูุฅุนุฏุงุฏุงุช</div>
          
          <Button
            onClick={handleExportSettings}
            variant="ghost"
            size="sm"
            className="w-full justify-start gap-3 h-9 hover:bg-accent/50 text-foreground"
            disabled={isExporting}
          >
            <Download className="w-4 h-4 text-green-600" />
            ุชุตุฏูุฑ ุงูุฅุนุฏุงุฏุงุช
            {isExporting && <div className="ml-auto w-3 h-3 border border-primary border-t-transparent rounded-full animate-spin" />}
          </Button>

          <Button
            onClick={handleImportSettings}
            variant="ghost"
            size="sm"
            className="w-full justify-start gap-3 h-9 hover:bg-accent/50 text-foreground"
            disabled={isImporting}
          >
            <Upload className="w-4 h-4 text-blue-600" />
            ุงุณุชูุฑุงุฏ ุงูุฅุนุฏุงุฏุงุช
            {isImporting && <div className="ml-auto w-3 h-3 border border-primary border-t-transparent rounded-full animate-spin" />}
          </Button>

          <Button
            onClick={handleResetSettings}
            variant="ghost"
            size="sm"
            className="w-full justify-start gap-3 h-9 hover:bg-destructive/10 text-destructive hover:text-destructive"
          >
            <RotateCcw className="w-4 h-4" />
            ุฅุนุงุฏุฉ ุชุนููู ุงูุฅุนุฏุงุฏุงุช
          </Button>
        </div>

        {/* ุงููุณู ุงูุฑุงุจุน - ุงูุฅุฏุงุฑุฉ (ูููุดุฑููู ููุท) */}
        {currentUser?.userType === 'owner' && onOpenReports && (
          <div className="p-3 border-b border-border">
            <Button
              onClick={onOpenReports}
              variant="ghost"
              size="sm"
              className="w-full justify-start gap-3 h-9 hover:bg-accent/50 text-foreground"
            >
              <Shield className="w-4 h-4 text-primary" />
              ุฅุฏุงุฑุฉ ุงูุชุจููุบุงุช
            </Button>
          </div>
        )}

        {/* ูุนูููุงุช ุงููุธุงู */}
        <div className="p-3 border-b border-border">
          <div className="text-xs text-muted-foreground space-y-1">
            <div className="flex justify-between">
              <span>ุงููุบุฉ:</span>
              <span>{settings.language.toUpperCase()}</span>
            </div>
            <div className="flex justify-between">
              <span>ุงูุซูู:</span>
              <span>{settings.theme}</span>
            </div>
            <div className="flex justify-between">
              <span>ุงูุฅุดุนุงุฑุงุช:</span>
              <span>{settings.notifications ? 'โ' : 'โ'}</span>
            </div>
          </div>
        </div>

        {/* ุงููุณู ุงูุฃุฎูุฑ - ุชุณุฌูู ุงูุฎุฑูุฌ */}
        <div className="p-3">
          <Button
            onClick={handleLogout}
            variant="ghost"
            size="sm"
            className="w-full justify-start gap-3 h-9 hover:bg-destructive/10 text-destructive hover:text-destructive"
          >
            <LogOut className="w-4 h-4" />
            ุชุณุฌูู ุงูุฎุฑูุฌ
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}