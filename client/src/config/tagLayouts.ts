export type TagLayout = {
  widthRatio: number;        // نسبة عرض التاج إلى قطر الصورة (1.0 = نفس عرض الصورة)
  xAdjustPx: number;         // إزاحة أفقية إضافية (px)
  yAdjustPx: number;         // إزاحة عمودية إضافية - موجب = للأسفل، سالب = للأعلى (px)
  anchorY?: number;          // مقدار دخول التاج في الصورة (0.3 = 30% من ارتفاع التاج يدخل)
  autoAnchor?: boolean;      // حساب الشفافية السفلية تلقائياً لرفع التاج
};

// 👑 القالب الموحد البسيط: كل التيجان تتبع نفس المنطق
// هذا يجعل التيجان تبدو مثل "عصبة الرأس" الطبيعية
export const DEFAULT_TAG_LAYOUT: TagLayout = {
  widthRatio: 1.10,    // التاج أعرض قليلاً من الصورة (10%)
  xAdjustPx: 0,        // في المنتصف
  yAdjustPx: 0,        // بدون ضبط يدوي — الثبات أولاً
  anchorY: 0.05,       // 5% دخول افتراضي — قاعدة موحّدة أبسط وأدق
  autoAnchor: true,    // يزيل الشفافية السفلية تلقائياً
};

// 🎯 إعدادات مخصصة لكل تاج (فقط التيجان التي تحتاج ضبط خاص)
export const TAG_LAYOUTS: Record<number, TagLayout> = (() => {
  const map: Record<number, TagLayout> = {};

  // ملء كل التيجان بالقالب الافتراضي أولاً
  for (let i = 1; i <= 50; i++) {
    map[i] = { ...DEFAULT_TAG_LAYOUT };
  }

  // Overrides per-tag based on deep analysis and auto-generated file
  // anchorY is a fraction of basePx, matching ProfileImage.tsx logic.
  const set = (n: number, layout: Partial<TagLayout>) => {
    map[n] = { ...map[n], ...layout } as TagLayout;
  };

  // Try to load generated overrides (client/src/config/tagOverrides.json)
  try {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const overrides: Record<string, Partial<TagLayout>> = require('./tagOverrides.json');
    for (const key of Object.keys(overrides)) {
      const num = parseInt(key, 10);
      if (!Number.isFinite(num)) continue;
      set(num, overrides[key]);
    }
  } catch {}

  // Fallback manual tweaks (kept minimal); generator file has priority
  // Example: if a tag still needs slight yAdjustment you can add it here.

  return map;
})();

export function getTagLayout(tagNumber?: number): TagLayout {
  if (!tagNumber) return DEFAULT_TAG_LAYOUT;
  return TAG_LAYOUTS[tagNumber] ?? DEFAULT_TAG_LAYOUT;
}
// AUTO-GENERATED-OVERRIDES-START
// Generated by tools/update-tag-layouts-from-recs.cjs
// tag 1: anchorY=0
// tag 2: anchorY=0.011
// tag 3: anchorY=0.021
// tag 4: anchorY=0
// tag 5: anchorY=0
// tag 6: anchorY=0.003
// tag 7: anchorY=0
// tag 8: anchorY=0
// tag 9: anchorY=0.03
// tag 10: anchorY=0
// tag 11: anchorY=0.011
// tag 12: anchorY=0
// tag 13: anchorY=0
// tag 14: anchorY=0
// tag 15: anchorY=0
// tag 16: anchorY=0
// tag 17: anchorY=0
// tag 18: anchorY=0.017
// tag 19: anchorY=0
// tag 20: anchorY=0
// tag 21: anchorY=0
// tag 22: anchorY=0
// tag 23: anchorY=0
// tag 24: anchorY=0
// tag 25: anchorY=0
// tag 26: anchorY=0
// tag 27: anchorY=0
// tag 28: anchorY=0
// tag 29: anchorY=0
// tag 30: anchorY=0
// tag 31: anchorY=0
// tag 32: anchorY=0
// tag 33: anchorY=0
// tag 34: anchorY=0
// AUTO-GENERATED-OVERRIDES-END