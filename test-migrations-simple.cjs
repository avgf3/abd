const postgres = require('postgres');
require('dotenv').config();

console.log('๐งช ุจุฏุก ุงุฎุชุจุงุฑ ูุงุนุฏุฉ ุงูุจูุงูุงุช...');

async function testDatabase() {
  try {
    // ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช
    const connectionString = process.env.DATABASE_URL || 'postgresql://postgres:password@localhost:5432/chat_db';
    const sql = postgres(connectionString, { max: 1 });
    
    console.log('โ ุชู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ');
    
    // ุงูุชุญูู ูู ูุฌูุฏ ุงูุฌุฏุงูู
    const tables = await sql`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_type = 'BASE TABLE'
      ORDER BY table_name
    `;
    
    console.log('๐ ุงูุฌุฏุงูู ุงูููุฌูุฏุฉ:');
    tables.forEach(table => {
      console.log(`  - ${table.table_name}`);
    });
    
    // ุงูุชุญูู ูู ูุฌูุฏ ุฌุฏูู ุงูุบุฑู
    const roomsTable = tables.find(t => t.table_name === 'rooms');
    if (roomsTable) {
      console.log('โ ุฌุฏูู ุงูุบุฑู ููุฌูุฏ');
      
      // ุงูุชุญูู ูู ุฃุนูุฏุฉ ุฌุฏูู ุงูุบุฑู
      const columns = await sql`
        SELECT column_name, data_type, is_nullable
        FROM information_schema.columns 
        WHERE table_name = 'rooms'
        ORDER BY ordinal_position
      `;
      
      console.log('๐ ุฃุนูุฏุฉ ุฌุฏูู ุงูุบุฑู:');
      columns.forEach(col => {
        console.log(`  - ${col.column_name} (${col.data_type}) ${col.is_nullable === 'YES' ? 'NULL' : 'NOT NULL'}`);
      });
      
      // ุงูุชุญูู ูู ูุฌูุฏ ุบุฑูุฉ ุงูุจุซ ุงููุจุงุดุฑ
      const broadcastRoom = await sql`
        SELECT * FROM rooms WHERE id = 'broadcast'
      `;
      
      if (broadcastRoom.length > 0) {
        console.log('โ ุบุฑูุฉ ุงูุจุซ ุงููุจุงุดุฑ ููุฌูุฏุฉ');
        console.log(`  - ุงูุงุณู: ${broadcastRoom[0].name}`);
        console.log(`  - ุงูุจุซ ุงููุจุงุดุฑ: ${broadcastRoom[0].is_broadcast}`);
        console.log(`  - ุงููุถูู: ${broadcastRoom[0].host_id}`);
        console.log(`  - ุงููุชุญุฏุซูู: ${broadcastRoom[0].speakers}`);
        console.log(`  - ูุงุฆูุฉ ุงูุงูุชุธุงุฑ: ${broadcastRoom[0].mic_queue}`);
      } else {
        console.log('โ ุบุฑูุฉ ุงูุจุซ ุงููุจุงุดุฑ ุบูุฑ ููุฌูุฏุฉ');
        
        // ุฅูุดุงุก ุบุฑูุฉ ุงูุจุซ ุงููุจุงุดุฑ
        console.log('๐ ุฅูุดุงุก ุบุฑูุฉ ุงูุจุซ ุงููุจุงุดุฑ...');
        await sql`
          INSERT INTO rooms (id, name, description, icon, created_by, is_default, is_active, is_broadcast, host_id, speakers, mic_queue)
          VALUES ('broadcast', 'ุบุฑูุฉ ุงูุจุซ ุงููุจุงุดุฑ', 'ุบุฑูุฉ ุฎุงุตุฉ ููุจุซ ุงููุจุงุดุฑ ูุน ูุธุงู ุงููุงูู', '', 1, false, true, true, 1, '[]', '[]')
          ON CONFLICT (id) DO NOTHING
        `;
        console.log('โ ุชู ุฅูุดุงุก ุบุฑูุฉ ุงูุจุซ ุงููุจุงุดุฑ');
      }
      
    } else {
      console.log('โ ุฌุฏูู ุงูุบุฑู ุบูุฑ ููุฌูุฏ');
    }
    
    await sql.end();
    console.log('โ ุชู ุฅุบูุงู ุงูุงุชุตุงู ุจูุฌุงุญ');
    
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุงุฎุชุจุงุฑ ูุงุนุฏุฉ ุงูุจูุงูุงุช:', error);
  }
}

testDatabase();