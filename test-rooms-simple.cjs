const { Pool } = require('@neondatabase/serverless');

// ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช
const databaseUrl = process.env.DATABASE_URL || 'postgresql://postgres.qzehjgmawnrihmepboca:abood22333a@aws-0-eu-west-3.pooler.supabase.com:6543/postgres';
const pool = new Pool({ connectionString: databaseUrl });

async function testRoomsSimple() {
  console.log('๐ ุจุฏุก ุงุฎุชุจุงุฑ ูุจุณุท ููุธุงู ุงูุบุฑู...\n');

  try {
    // 1. ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช
    console.log('1๏ธโฃ ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช...');
    const result = await pool.query('SELECT 1 as test');
    console.log('โ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ูุนูู\n');

    // 2. ุฌูุจ ุฌููุน ุงูุบุฑู
    console.log('2๏ธโฃ ุฌูุจ ุฌููุน ุงูุบุฑู...');
    const roomsResult = await pool.query(`
      SELECT 
        id, 
        name, 
        description, 
        is_default,
        is_active,
        is_broadcast,
        created_at,
        (
          SELECT COUNT(*)::int 
          FROM room_users ru 
          WHERE ru.room_id = rooms.id
        ) as user_count
      FROM rooms 
      WHERE is_active = true 
      ORDER BY is_default DESC, created_at ASC
    `);

    console.log(`โ ุชู ุฌูุจ ${roomsResult.rows.length} ุบุฑูุฉ:`);
    roomsResult.rows.forEach(room => {
      console.log(`   - ${room.name} (${room.id}) - ${room.user_count} ูุณุชุฎุฏู`);
    });
    console.log('');

    // 3. ุงุฎุชุจุงุฑ ุฌูุจ ุงููุณุชุฎุฏููู ูู ูู ุบุฑูุฉ
    console.log('3๏ธโฃ ุงุฎุชุจุงุฑ ุฌูุจ ุงููุณุชุฎุฏููู ูู ูู ุบุฑูุฉ...');
    for (const room of roomsResult.rows) {
      const usersResult = await pool.query(`
        SELECT 
          ru.user_id,
          ru.joined_at,
          u.username,
          u.user_type
        FROM room_users ru
        JOIN users u ON ru.user_id = u.id
        WHERE ru.room_id = $1
      `, [room.id]);

      console.log(`   ุบุฑูุฉ "${room.name}": ${usersResult.rows.length} ูุณุชุฎุฏู`);
      usersResult.rows.forEach(user => {
        console.log(`     - ${user.username} (${user.user_type})`);
      });
    }
    console.log('');

    // 4. ุงุฎุชุจุงุฑ API endpoint
    console.log('4๏ธโฃ ุงุฎุชุจุงุฑ API endpoint...');
    try {
      const response = await fetch('http://localhost:3000/api/rooms');
      if (response.ok) {
        const data = await response.json();
        console.log(`โ API ูุนูู - ุนุฏุฏ ุงูุบุฑู ุงูููุฑุฌุนุฉ: ${data.rooms.length}`);
        data.rooms.forEach(room => {
          console.log(`   - API: ${room.name} (${room.id}) - ${room.userCount} ูุณุชุฎุฏู`);
        });
      } else {
        console.log(`โ API ูุง ูุนูู - Status: ${response.status}`);
      }
    } catch (error) {
      console.log(`โ ุฎุทุฃ ูู ุงุชุตุงู API:`, error.message);
    }
    console.log('');

    console.log('๐ ุฌููุน ุงูุงุฎุชุจุงุฑุงุช ูุฌุญุช! ูุธุงู ุงูุบุฑู ูุนูู ุจุดูู ุตุญูุญ.');
    console.log('\n๐ ููุฎุต ุงูุฅุตูุงุญุงุช ุงููุทููุจุฉ:');
    console.log('1. โ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุชุนูู ุจุดูู ุตุญูุญ');
    console.log('2. โ ุงูุบุฑู ููุฌูุฏุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช');
    console.log('3. โ API endpoint ูุนูู');
    console.log('4. โ ุงูุถูุงู ุงููุณุชุฎุฏููู ููุบุฑู ูุนูู');
    console.log('5. ๐ง ุงููุดููุฉ ูู ุงููุงุฌูุฉ ุงูุฃูุงููุฉ - ุชุญุชุงุฌ ุชุญุฏูุซ');

  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุงุฎุชุจุงุฑ ูุธุงู ุงูุบุฑู:', error);
  } finally {
    await pool.end();
  }
}

// ุชุดุบูู ุงูุงุฎุชุจุงุฑ
testRoomsSimple();