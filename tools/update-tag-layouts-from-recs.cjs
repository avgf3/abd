#!/usr/bin/env node
const fs = require('fs');
const path = require('path');

const RECS_PATH = path.resolve(__dirname, 'tag-layouts-recommendations.json');
const CONFIG_TS = path.resolve(__dirname, '..', 'client', 'src', 'config', 'tagLayouts.ts');

function loadRecs(){
  const json = JSON.parse(fs.readFileSync(RECS_PATH, 'utf8'));
  // Convert to map of num -> rec.anchorY
  const map = new Map();
  for (const { num, rec } of json) {
    if (rec && typeof rec.anchorY === 'number') map.set(num, rec.anchorY);
  }
  return map;
}

function updateTagLayoutsTs(anchorMap){
  let src = fs.readFileSync(CONFIG_TS, 'utf8');
  // Ensure we only rely on tagOverrides.json at runtime and not hard-code too many sets
  // We'll still inject a compact comment block listing overrides for visibility
  const startMarker = '// AUTO-GENERATED-OVERRIDES-START';
  const endMarker = '// AUTO-GENERATED-OVERRIDES-END';
  const before = src.split(startMarker)[0] || src;
  const after = src.includes(endMarker) ? src.slice(src.indexOf(endMarker) + endMarker.length) : '';

  const lines = [];
  lines.push(startMarker);
  lines.push('// Generated by tools/update-tag-layouts-from-recs.cjs');
  const sorted = [...anchorMap.entries()].sort((a,b) => a[0]-b[0]);
  for (const [num, val] of sorted) {
    lines.push(`// tag ${num}: anchorY=${val}`);
  }
  lines.push(endMarker);

  const newSrc = before + lines.join('\n') + after;
  fs.writeFileSync(CONFIG_TS, newSrc);
}

function main(){
  const recs = loadRecs();
  updateTagLayoutsTs(recs);
  console.log('Updated tagLayouts.ts with comments of overrides. Runtime uses tagOverrides.json.');
}

main();
