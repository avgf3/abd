import { io } from 'socket.io-client';
import dotenv from 'dotenv';

dotenv.config();

const SERVER_URL = 'http://localhost:5000';

async function testGeneralChat() {
  console.log('๐งช ุจุฏุก ุงุฎุชุจุงุฑ ุงูุฏุฑุฏุดุฉ ุงูุนุงูุฉ...');
  
  try {
    // ุฅูุดุงุก ุงุชุตุงู Socket.IO
    const socket = io(SERVER_URL, {
      path: '/socket.io/',
      transports: ['websocket', 'polling']
    });

    // ุงูุชุธุงุฑ ุงูุงุชุตุงู
    await new Promise((resolve, reject) => {
      const timeout = setTimeout(() => {
        reject(new Error('ุงูุชูุช ูููุฉ ุงูุงุชุตุงู'));
      }, 10000);

      socket.on('connect', () => {
        clearTimeout(timeout);
        console.log('โ ุชู ุงูุงุชุตุงู ุจูุฌุงุญ');
        resolve();
      });

      socket.on('connect_error', (error) => {
        clearTimeout(timeout);
        console.error('โ ุฎุทุฃ ูู ุงูุงุชุตุงู:', error.message);
        reject(error);
      });
    });

    // ุงุฎุชุจุงุฑ ุงููุตุงุฏูุฉ
    console.log('๐ ุงุฎุชุจุงุฑ ุงููุตุงุฏูุฉ...');
    socket.emit('auth', { userId: 1, username: 'test_user', userType: 'member' });

    await new Promise((resolve, reject) => {
      const timeout = setTimeout(() => {
        reject(new Error('ุงูุชูุช ูููุฉ ุงููุตุงุฏูุฉ'));
      }, 10000);

      socket.on('connected', (data) => {
        clearTimeout(timeout);
        console.log('โ ุชูุช ุงููุตุงุฏูุฉ ุจูุฌุงุญ:', data.message);
        resolve();
      });

      socket.on('error', (error) => {
        clearTimeout(timeout);
        console.error('โ ุฎุทุฃ ูู ุงููุตุงุฏูุฉ:', error.message);
        reject(error);
      });
    });

    // ุงุฎุชุจุงุฑ ุฅุฑุณุงู ุฑุณุงูุฉ ุนุงูุฉ
    console.log('๐ค ุงุฎุชุจุงุฑ ุฅุฑุณุงู ุฑุณุงูุฉ ุนุงูุฉ...');
    const testMessage = {
      content: 'ูุฑุญุจุงู ุจุงูุฌููุน! ูุฐู ุฑุณุงูุฉ ุงุฎุชุจุงุฑ ููุฏุฑุฏุดุฉ ุงูุนุงูุฉ',
      roomId: 'general',
      messageType: 'text'
    };

    socket.emit('publicMessage', testMessage);

    await new Promise((resolve, reject) => {
      const timeout = setTimeout(() => {
        reject(new Error('ุงูุชูุช ูููุฉ ุฅุฑุณุงู ุงูุฑุณุงูุฉ'));
      }, 10000);

      socket.on('message', (data) => {
        if (data.type === 'newMessage') {
          clearTimeout(timeout);
          console.log('โ ุชู ุฅุฑุณุงู ุงูุฑุณุงูุฉ ุจูุฌุงุญ:', data.message.content);
          resolve();
        } else if (data.type === 'error') {
          clearTimeout(timeout);
          console.error('โ ุฎุทุฃ ูู ุฅุฑุณุงู ุงูุฑุณุงูุฉ:', data.message);
          reject(new Error(data.message));
        }
      });
    });

    // ุงุฎุชุจุงุฑ ุงุณุชูุจุงู ุงูุฑุณุงุฆู
    console.log('๐ฅ ุงุฎุชุจุงุฑ ุงุณุชูุจุงู ุงูุฑุณุงุฆู...');
    await new Promise((resolve) => {
      setTimeout(() => {
        console.log('โ ุชู ุงุฎุชุจุงุฑ ุงุณุชูุจุงู ุงูุฑุณุงุฆู');
        resolve();
      }, 2000);
    });

    console.log('๐ ุฌููุน ุงูุงุฎุชุจุงุฑุงุช ูุฌุญุช!');
    
  } catch (error) {
    console.error('โ ูุดู ูู ุงูุงุฎุชุจุงุฑ:', error.message);
    
    // ุชุญููู ุงููุดููุฉ
    if (error.message.includes('ECONNREFUSED')) {
      console.log('๐ก ุงููุดููุฉ: ุงูุฎุงุฏู ุบูุฑ ูุดุบู');
      console.log('๐ง ุงูุญู: ุดุบู ุงูุฎุงุฏู ุฃููุงู ุจู npm run dev');
    } else if (error.message.includes('ุงููุตุงุฏูุฉ')) {
      console.log('๐ก ุงููุดููุฉ: ูุดููุฉ ูู ุงููุตุงุฏูุฉ');
      console.log('๐ง ุงูุญู: ุชุญูู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ูุงููุณุชุฎุฏููู');
    } else if (error.message.includes('ุงูุฑุณุงูุฉ')) {
      console.log('๐ก ุงููุดููุฉ: ูุดููุฉ ูู ุฅุฑุณุงู ุงูุฑุณุงุฆู');
      console.log('๐ง ุงูุญู: ุชุญูู ูู ุฅุนุฏุงุฏุงุช ุงูุฃูุงู ูุงูุณุจุงู');
    }
  } finally {
    process.exit(0);
  }
}

testGeneralChat();