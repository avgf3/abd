const mysql = require('mysql2/promise');
const fs = require('fs').promises;
const path = require('path');
const bcrypt = require('bcryptjs');
require('dotenv').config();

async function setup() {
    console.log('๐ ุจุฏุก ุฅุนุฏุงุฏ ูุธุงู ุงูุจูุชุงุช...\n');
    
    let connection;
    
    try {
        // ุงูุงุชุตุงู ุจู MySQL ุจุฏูู ุชุญุฏูุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช
        console.log('๐ ุงูุงุชุตุงู ุจุฎุงุฏู MySQL...');
        connection = await mysql.createConnection({
            host: process.env.DB_HOST,
            user: process.env.DB_USER,
            password: process.env.DB_PASSWORD,
            multipleStatements: true
        });
        
        console.log('โ ุชู ุงูุงุชุตุงู ุจูุฌุงุญ\n');
        
        // ูุฑุงุกุฉ ููู SQL
        console.log('๐ ูุฑุงุกุฉ ููู ูุงุนุฏุฉ ุงูุจูุงูุงุช...');
        const sqlFile = await fs.readFile(path.join(__dirname, 'database', 'schema.sql'), 'utf8');
        
        // ุชูููุฐ ุงูุฃูุงูุฑ
        console.log('๐จ ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช ูุงูุฌุฏุงูู...');
        await connection.query(sqlFile);
        
        console.log('โ ุชู ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ\n');
        
        // ุงูุชุจุฏูู ุฅูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
        await connection.changeUser({ database: process.env.DB_NAME });
        
        // ุงูุชุญูู ูู ูุฌูุฏ ุงููุณุชุฎุฏู ุงูุงูุชุฑุงุถู
        const [users] = await connection.execute('SELECT * FROM users WHERE username = ?', ['admin']);
        
        if (users.length === 0) {
            console.log('๐ค ุฅูุดุงุก ุงููุณุชุฎุฏู ุงูุงูุชุฑุงุถู...');
            const hashedPassword = await bcrypt.hash('admin123', 10);
            await connection.execute(
                'INSERT INTO users (username, password, role) VALUES (?, ?, ?)',
                ['admin', hashedPassword, 'owner']
            );
            console.log('โ ุชู ุฅูุดุงุก ุงููุณุชุฎุฏู ุงูุงูุชุฑุงุถู\n');
        }
        
        // ุฅูุดุงุก ุงูุจูุชุงุช
        console.log('๐ค ูู ุชุฑูุฏ ุฅูุดุงุก 300 ุจูุช ุงูุขูุ (ูุนู/ูุง)');
        const readline = require('readline').createInterface({
            input: process.stdin,
            output: process.stdout
        });
        
        readline.question('ุงุฎุชูุงุฑู: ', async (answer) => {
            if (answer.toLowerCase() === 'ูุนู' || answer.toLowerCase() === 'yes' || answer.toLowerCase() === 'y') {
                console.log('\n๐ค ุฌุงุฑู ุฅูุดุงุก 300 ุจูุช...');
                const Bot = require('./src/models/Bot');
                await Bot.createMultipleBots(300);
                console.log('โ ุชู ุฅูุดุงุก ุงูุจูุชุงุช ุจูุฌุงุญ\n');
            }
            
            console.log('\n๐ ุชู ุฅุนุฏุงุฏ ุงููุธุงู ุจูุฌุงุญ!\n');
            console.log('๐ ูุนูููุงุช ุชุณุฌูู ุงูุฏุฎูู ุงูุงูุชุฑุงุถูุฉ:');
            console.log('   ุงุณู ุงููุณุชุฎุฏู: admin');
            console.log('   ูููุฉ ุงููุฑูุฑ: admin123\n');
            console.log('๐ ูุจุฏุก ุงููุธุงูุ ุงุณุชุฎุฏู ุงูุฃูุฑ: npm start');
            console.log('๐ค ูุชุดุบูู ูุฏูุฑ ุงูุจูุชุงุชุ ุงุณุชุฎุฏู ุงูุฃูุฑ: npm run bot\n');
            
            readline.close();
            await connection.end();
            process.exit(0);
        });
        
    } catch (error) {
        console.error('\nโ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงูุฅุนุฏุงุฏ:', error.message);
        
        if (error.code === 'ECONNREFUSED') {
            console.error('\n๐ ุชุฃูุฏ ูู:');
            console.error('   1. ุชุดุบูู ุฎุงุฏู MySQL');
            console.error('   2. ุตุญุฉ ุจูุงูุงุช ุงูุงุชุตุงู ูู ููู .env');
        }
        
        if (connection) {
            await connection.end();
        }
        
        process.exit(1);
    }
}

// ุชุดุบูู ุงูุฅุนุฏุงุฏ
setup();