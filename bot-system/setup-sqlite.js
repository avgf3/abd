const db = require('./config/database-sqlite');
const bcrypt = require('bcryptjs');

async function setup() {
    console.log('๐ ุจุฏุก ุฅุนุฏุงุฏ ูุธุงู ุงูุจูุชุงุช (SQLite)...\n');
    
    try {
        // ุฅูุดุงุก ุงูุฌุฏุงูู
        console.log('๐ ุฅูุดุงุก ุงูุฌุฏุงูู...');
        
        // ุฌุฏูู ุงููุณุชุฎุฏููู
        await db.asyncRun(`
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                password TEXT NOT NULL,
                role TEXT DEFAULT 'owner',
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                last_login DATETIME
            )
        `);
        
        // ุฌุฏูู ุงูุจูุชุงุช
        await db.asyncRun(`
            CREATE TABLE IF NOT EXISTS bots (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                bot_id TEXT UNIQUE NOT NULL,
                name TEXT NOT NULL,
                avatar TEXT,
                status TEXT DEFAULT 'offline',
                current_room TEXT DEFAULT 'lobby',
                behavior_type TEXT DEFAULT 'normal',
                activity_level INTEGER DEFAULT 5,
                last_activity DATETIME,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                settings TEXT
            )
        `);
        
        // ุฌุฏูู ุงูุบุฑู
        await db.asyncRun(`
            CREATE TABLE IF NOT EXISTS rooms (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                room_name TEXT UNIQUE NOT NULL,
                room_type TEXT DEFAULT 'public',
                max_users INTEGER DEFAULT 100,
                current_users INTEGER DEFAULT 0,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        `);
        
        // ุฌุฏูู ุณุฌู ุงููุดุงุทุงุช
        await db.asyncRun(`
            CREATE TABLE IF NOT EXISTS bot_activities (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                bot_id TEXT,
                action_type TEXT,
                room_name TEXT,
                details TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (bot_id) REFERENCES bots(bot_id) ON DELETE CASCADE
            )
        `);
        
        // ุฌุฏูู ุงูุฑุณุงุฆู
        await db.asyncRun(`
            CREATE TABLE IF NOT EXISTS bot_messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                category TEXT,
                message TEXT,
                language TEXT DEFAULT 'ar',
                usage_count INTEGER DEFAULT 0
            )
        `);
        
        // ุฌุฏูู ุงูุฅุนุฏุงุฏุงุช
        await db.asyncRun(`
            CREATE TABLE IF NOT EXISTS system_settings (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                setting_key TEXT UNIQUE NOT NULL,
                setting_value TEXT,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        `);
        
        console.log('โ ุชู ุฅูุดุงุก ุงูุฌุฏุงูู ุจูุฌุงุญ\n');
        
        // ุฅุฏุฑุงุฌ ุงูุจูุงูุงุช ุงูุงูุชุฑุงุถูุฉ
        console.log('๐ ุฅุฏุฑุงุฌ ุงูุจูุงูุงุช ุงูุงูุชุฑุงุถูุฉ...');
        
        // ุงููุณุชุฎุฏู ุงูุงูุชุฑุงุถู
        const hashedPassword = await bcrypt.hash('admin123', 10);
        await db.asyncRun(
            'INSERT OR IGNORE INTO users (username, password, role) VALUES (?, ?, ?)',
            ['admin', hashedPassword, 'owner']
        );
        
        // ุงูุบุฑู ุงูุงูุชุฑุงุถูุฉ
        const rooms = ['lobby', 'general', 'gaming', 'music', 'sports'];
        for (const room of rooms) {
            await db.asyncRun(
                'INSERT OR IGNORE INTO rooms (room_name) VALUES (?)',
                [room]
            );
        }
        
        // ุงูุฑุณุงุฆู ุงูุงูุชุฑุงุถูุฉ
        const messages = [
            { category: 'greeting', message: 'ูุฑุญุจุง ุจุงูุฌููุน! ๐' },
            { category: 'greeting', message: 'ุงูุณูุงู ุนูููู ูุฑุญูุฉ ุงููู' },
            { category: 'greeting', message: 'ุฃููุงู ูุณููุงู' },
            { category: 'chat', message: 'ููู ุญุงููู ุงููููุ' },
            { category: 'chat', message: 'ุงูุฌู ุฌููู ุงูููู' },
            { category: 'chat', message: 'ูู ุดุงูุฏ ุฃุญุฏ ุงููุจุงุฑุงุฉ ุฃูุณุ' },
            { category: 'chat', message: 'ุฃูุง ุฃุญุจ ูุฐู ุงูุบุฑูุฉ' },
            { category: 'reaction', message: 'ูููููู ๐' },
            { category: 'reaction', message: 'ุตุญูุญ!' },
            { category: 'reaction', message: 'ููุชุงุฒ' },
            { category: 'farewell', message: 'ุฅูู ุงูููุงุก' },
            { category: 'farewell', message: 'ุณุฃุนูุฏ ูุฑูุจุงู' }
        ];
        
        for (const msg of messages) {
            await db.asyncRun(
                'INSERT OR IGNORE INTO bot_messages (category, message) VALUES (?, ?)',
                [msg.category, msg.message]
            );
        }
        
        console.log('โ ุชู ุฅุฏุฑุงุฌ ุงูุจูุงูุงุช ุงูุงูุชุฑุงุถูุฉ\n');
        
        // ุฅูุดุงุก ุงูุจูุชุงุช
        console.log('๐ค ูู ุชุฑูุฏ ุฅูุดุงุก 300 ุจูุช ุงูุขูุ (ูุนู/ูุง)');
        
        const readline = require('readline').createInterface({
            input: process.stdin,
            output: process.stdout
        });
        
        readline.question('ุงุฎุชูุงุฑู: ', async (answer) => {
            if (answer.toLowerCase() === 'ูุนู' || answer.toLowerCase() === 'yes' || answer.toLowerCase() === 'y') {
                console.log('\n๐ค ุฌุงุฑู ุฅูุดุงุก 300 ุจูุช...');
                
                const arabicNames = [
                    'ุฃุญูุฏ', 'ูุญูุฏ', 'ุนูู', 'ุญุณู', 'ุฎุงูุฏ', 'ุนูุฑ', 'ุณุงุฑุฉ', 'ูุงุทูุฉ', 'ูุฑูู', 'ููุฑ',
                    'ููุณู', 'ุฅุจุฑุงููู', 'ุนุจุฏุงููู', 'ุนุจุฏุงูุฑุญูู', 'ุณููุงู', 'ููุตู', 'ุชุฑูู', 'ููุงู',
                    'ุฑูู', 'ุฏุงูุฉ', 'ูููุง', 'ููุฏ', 'ุฃูู', 'ุณููู', 'ุฒููุจ', 'ุนุงุฆุดุฉ', 'ุฎุฏูุฌุฉ', 'ุขูุงุก'
                ];
                
                for (let i = 1; i <= 300; i++) {
                    const randomName = arabicNames[Math.floor(Math.random() * arabicNames.length)];
                    const botNumber = String(i).padStart(3, '0');
                    const bot_id = `BOT_${botNumber}`;
                    const name = `${randomName}_${botNumber}`;
                    const avatar = `https://api.dicebear.com/7.x/avataaars/svg?seed=${bot_id}`;
                    const behavior_type = ['active', 'normal', 'quiet'][Math.floor(Math.random() * 3)];
                    const activity_level = Math.floor(Math.random() * 10) + 1;
                    
                    const settings = JSON.stringify({
                        typing_speed: Math.floor(Math.random() * 3) + 2,
                        response_delay: Math.floor(Math.random() * 5) + 3,
                        personality: ['friendly', 'talkative', 'quiet', 'funny'][Math.floor(Math.random() * 4)]
                    });
                    
                    await db.asyncRun(
                        `INSERT INTO bots (bot_id, name, avatar, behavior_type, activity_level, settings) 
                         VALUES (?, ?, ?, ?, ?, ?)`,
                        [bot_id, name, avatar, behavior_type, activity_level, settings]
                    );
                    
                    if (i % 50 === 0) {
                        console.log(`โ ุชู ุฅูุดุงุก ${i} ุจูุช`);
                    }
                }
                
                console.log('โ ุชู ุฅูุดุงุก 300 ุจูุช ุจูุฌุงุญ!\n');
            }
            
            console.log('\n๐ ุชู ุฅุนุฏุงุฏ ุงููุธุงู ุจูุฌุงุญ!\n');
            console.log('๐ ูุนูููุงุช ุชุณุฌูู ุงูุฏุฎูู:');
            console.log('   ุงุณู ุงููุณุชุฎุฏู: admin');
            console.log('   ูููุฉ ุงููุฑูุฑ: admin123\n');
            console.log('๐ ูุจุฏุก ุงููุธุงูุ ุงุณุชุฎุฏู ุงูุฃูุฑ: npm run setup && npm start');
            console.log('๐ค ูุชุดุบูู ูุฏูุฑ ุงูุจูุชุงุชุ ุงุณุชุฎุฏู ุงูุฃูุฑ: npm run bot\n');
            
            readline.close();
            db.close();
            process.exit(0);
        });
        
    } catch (error) {
        console.error('\nโ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงูุฅุนุฏุงุฏ:', error.message);
        db.close();
        process.exit(1);
    }
}

// ุชุดุบูู ุงูุฅุนุฏุงุฏ
setup();