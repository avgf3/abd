import { io } from "/@fs/var/www/abd/node_modules/.vite/deps/socket__io-client.js?v=197578e1";
const STORAGE_KEY = "chat_session";
export function saveSession(partial) {
  try {
    const existing = getSession();
    const merged = { ...existing, ...partial };
    localStorage.setItem(STORAGE_KEY, JSON.stringify(merged));
  } catch {
  }
}
export function getSession() {
  try {
    const raw = localStorage.getItem(STORAGE_KEY);
    if (!raw) return {};
    return JSON.parse(raw);
  } catch {
    return {};
  }
}
export function clearSession() {
  try {
    localStorage.removeItem(STORAGE_KEY);
  } catch {
  }
  if (socketInstance) {
    socketInstance.removeAllListeners();
    socketInstance.disconnect();
    socketInstance = null;
  }
}
let socketInstance = null;
function getServerUrl() {
  try {
    const isDev = import.meta?.env?.DEV;
    if (isDev) return "http://localhost:5000";
    const protocol = window.location.protocol;
    const host = window.location.host;
    return `${protocol}//${host}`;
  } catch {
    return window.location.origin;
  }
}
function attachCoreListeners(socket) {
  const anySocket = socket;
  if (anySocket.__coreListenersAttached) return;
  anySocket.__coreListenersAttached = true;
  const reauth = (isReconnect) => {
    const session = getSession();
    if (!session || !session.userId && !session.username) return;
    try {
      socket.emit("auth", {
        userId: session.userId,
        username: session.username,
        userType: session.userType,
        token: session.token,
        reconnect: isReconnect
      });
    } catch {
    }
  };
  socket.on("connect", () => {
    reauth(false);
  });
  socket.on("reconnect", () => {
    reauth(true);
  });
  window.addEventListener("online", () => {
    if (!socket.connected) {
      try {
        socket.connect();
      } catch {
      }
    }
  });
}
export function getSocket() {
  if (socketInstance && !getSession().userId && !getSession().username) {
    socketInstance.removeAllListeners();
    socketInstance.disconnect();
    socketInstance = null;
  }
  if (socketInstance) return socketInstance;
  const deviceId = (() => {
    try {
      const existing = localStorage.getItem("deviceId");
      if (existing) return existing;
      const id = "web-" + Math.random().toString(36).slice(2);
      localStorage.setItem("deviceId", id);
      return id;
    } catch {
      return "web-unknown";
    }
  })();
  const serverUrl = getServerUrl();
  const isDevelopment = import.meta?.env?.DEV;
  const isProduction = !isDevelopment;
  const sessionForHandshake = getSession();
  socketInstance = io(serverUrl, {
    path: "/socket.io",
    // ๐ฅ ุงุจุฏุฃ ุจู polling ูุถูุงู ุงููุฌุงุญ ุซู ุญุงูู ุงูุชุฑููุฉ ุฅูู WebSocket
    transports: ["polling", "websocket"],
    upgrade: true,
    rememberUpgrade: false,
    // ุชุฌูุจ ูุญุงููุฉ WS ูุจุงุดุฑุฉ ุฅุฐุง ูุดู ุณุงุจูุงู
    autoConnect: false,
    reconnection: true,
    // ๐ฅ ุชุญุณูู ุฅุนุงุฏุฉ ุงูุงุชุตุงู - ูุญุงููุงุช ูุญุฏูุฏุฉ ูุน ุชุฏุฑุฌ ุฐูู
    reconnectionAttempts: isProduction ? 10 : 5,
    // ูุญุงููุงุช ูุญุฏูุฏุฉ ุจุฏูุงู ูู ูุงููุงุฆูุฉ
    reconnectionDelay: isDevelopment ? 1e3 : 2e3,
    // ุชูููู ุงูุชุฃุฎูุฑ ูู ุงูุชุทููุฑ
    reconnectionDelayMax: isProduction ? 1e4 : 5e3,
    // ุชูููู ุงูุญุฏ ุงูุฃูุตู
    randomizationFactor: 0.3,
    // ุชูููู ุงูุนุดูุงุฆูุฉ ูุงุชุตุงู ุฃุณุฑุน
    // ๐ฅ ุชุญุณูู ุฃููุงุช ุงูุงุณุชุฌุงุจุฉ
    timeout: isDevelopment ? 15e3 : 2e4,
    // timeout ุฃูู ูุงุณุชุฌุงุจุฉ ุฃุณุฑุน
    forceNew: false,
    // ุฅุนุงุฏุฉ ุงุณุชุฎุฏุงู ุงูุงุชุตุงูุงุช ุงูููุฌูุฏุฉ
    withCredentials: true,
    auth: { deviceId, token: sessionForHandshake?.token },
    extraHeaders: { "x-device-id": deviceId },
    // ๐ฅ ุฅุนุฏุงุฏุงุช ูุญุณููุฉ ููุงุณุชูุฑุงุฑ ูุงูุฃุฏุงุก
    closeOnBeforeunload: false,
    // ูุง ุชุบูู ุนูุฏ ุฅุนุงุฏุฉ ุงูุชุญููู
    // ๐ฅ ุชุญุณูู ุฅุฏุงุฑุฉ ุงูุงุชุตุงู
    multiplex: true,
    // ุชูููู multiplexing ููุฃุฏุงุก ุงูุฃูุถู
    forceBase64: false,
    // ุงุณุชุฎุฏุงู binary ููุฃุฏุงุก ุงูุฃูุถู
    // ๐ฅ ุฅุนุฏุงุฏุงุช ping ูุฎุตุตุฉ (ูุฐู ุงูุฎูุงุฑุงุช ููุฎุงุฏู ููุทุ ููู ูุชุฑููุง ููุชูุซูู)
    // pingTimeout: isProduction ? 60000 : 30000, // ูุทุงุจู ููุฎุงุฏู
    // pingInterval: isProduction ? 25000 : 15000, // ูุทุงุจู ููุฎุงุฏู
    query: {
      deviceId,
      t: Date.now(),
      // timestamp ูุชุฌูุจ ุงููุงุด
      // ๐ฅ ุฅุถุงูุฉ ูุนูููุงุช ุฅุถุงููุฉ ููุชุดุฎูุต
      userAgent: navigator.userAgent.slice(0, 100),
      // ูุนูููุงุช ุงููุชุตูุญ (ูุญุฏูุฏุฉ)
      screen: `${screen.width}x${screen.height}`,
      // ุฏูุฉ ุงูุดุงุดุฉ
      connection: navigator.connection?.effectiveType || "unknown"
      // ููุน ุงูุงุชุตุงู
    }
  });
  attachCoreListeners(socketInstance);
  return socketInstance;
}
export function connectSocket() {
  const s = getSocket();
  try {
    if (!s.connected) s.connect();
  } catch {
  }
  return s;
}

//# sourceMappingURL=data:application/json;base64,