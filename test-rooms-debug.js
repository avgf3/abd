import dotenv from 'dotenv';
dotenv.config();

const { Pool } = require('@neondatabase/serverless');
const { drizzle } = require('drizzle-orm/neon-serverless');
const { eq, desc, asc, sql } = require('drizzle-orm');

// ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช
const databaseUrl = process.env.DATABASE_URL || 'postgresql://postgres.qzehjgmawnrihmepboca:abood22333a@aws-0-eu-west-3.pooler.supabase.com:6543/postgres';
const pool = new Pool({ connectionString: databaseUrl });
const db = drizzle(pool);

// ุงุณุชูุฑุงุฏ ุงูุฌุฏุงูู
const { rooms, roomUsers, users } = require('./shared/schema.ts');

async function testRoomsSystem() {
  console.log('๐ ุจุฏุก ุงุฎุชุจุงุฑ ูุธุงู ุงูุบุฑู...\n');

  try {
    // 1. ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช
    console.log('1๏ธโฃ ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช...');
    await db.execute('SELECT 1');
    console.log('โ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ูุนูู\n');

    // 2. ุฌูุจ ุฌููุน ุงูุบุฑู
    console.log('2๏ธโฃ ุฌูุจ ุฌููุน ุงูุบุฑู...');
    const allRooms = await db.select({
      id: rooms.id,
      name: rooms.name,
      description: rooms.description,
      icon: rooms.icon,
      createdBy: rooms.createdBy,
      isDefault: rooms.isDefault,
      isActive: rooms.isActive,
      isBroadcast: rooms.isBroadcast,
      hostId: rooms.hostId,
      speakers: rooms.speakers,
      micQueue: rooms.micQueue,
      createdAt: rooms.createdAt,
      userCount: sql`(
        SELECT COUNT(*)::int 
        FROM room_users ru 
        WHERE ru.room_id = rooms.id
      )`
    })
    .from(rooms)
    .where(eq(rooms.isActive, true))
    .orderBy(desc(rooms.isDefault), asc(rooms.createdAt));

    console.log(`โ ุชู ุฌูุจ ${allRooms.length} ุบุฑูุฉ:`);
    allRooms.forEach(room => {
      console.log(`   - ${room.name} (${room.id}) - ${room.userCount} ูุณุชุฎุฏู`);
    });
    console.log('');

    // 3. ุงุฎุชุจุงุฑ ุฌูุจ ุงููุณุชุฎุฏููู ูู ูู ุบุฑูุฉ
    console.log('3๏ธโฃ ุงุฎุชุจุงุฑ ุฌูุจ ุงููุณุชุฎุฏููู ูู ูู ุบุฑูุฉ...');
    for (const room of allRooms) {
      const roomUsers = await db.select({
        userId: roomUsers.userId,
        joinedAt: roomUsers.joinedAt
      })
      .from(roomUsers)
      .where(eq(roomUsers.roomId, room.id));

      console.log(`   ุบุฑูุฉ "${room.name}": ${roomUsers.length} ูุณุชุฎุฏู`);
      if (roomUsers.length > 0) {
        for (const ru of roomUsers) {
          const user = await db.select({
            username: users.username,
            userType: users.userType
          })
          .from(users)
          .where(eq(users.id, ru.userId));
          
          if (user[0]) {
            console.log(`     - ${user[0].username} (${user[0].userType})`);
          }
        }
      }
    }
    console.log('');

    // 4. ุงุฎุชุจุงุฑ ุฅูุดุงุก ุบุฑูุฉ ุฌุฏูุฏุฉ
    console.log('4๏ธโฃ ุงุฎุชุจุงุฑ ุฅูุดุงุก ุบุฑูุฉ ุฌุฏูุฏุฉ...');
    const testRoomId = `test_room_${Date.now()}`;
    const newRoom = await db.insert(rooms).values({
      id: testRoomId,
      name: 'ุบุฑูุฉ ุงูุงุฎุชุจุงุฑ',
      description: 'ุบุฑูุฉ ูุงุฎุชุจุงุฑ ุงููุธุงู',
      icon: '',
      createdBy: 1,
      isDefault: false,
      isActive: true,
      isBroadcast: false,
      hostId: null,
      speakers: '[]',
      micQueue: '[]'
    }).returning();

    console.log(`โ ุชู ุฅูุดุงุก ุบุฑูุฉ ุฌุฏูุฏุฉ: ${newRoom[0].name}`);
    console.log('');

    // 5. ุงุฎุชุจุงุฑ ุงูุถูุงู ูุณุชุฎุฏู ููุบุฑูุฉ
    console.log('5๏ธโฃ ุงุฎุชุจุงุฑ ุงูุถูุงู ูุณุชุฎุฏู ููุบุฑูุฉ...');
    await db.insert(roomUsers).values({
      userId: 1,
      roomId: testRoomId
    });

    console.log('โ ุชู ุงูุถูุงู ุงููุณุชุฎุฏู ููุบุฑูุฉ');
    console.log('');

    // 6. ุงุฎุชุจุงุฑ ุฌูุจ ุงูุบุฑู ูุฑุฉ ุฃุฎุฑู ููุชุฃูุฏ ูู ุงูุชุญุฏูุซ
    console.log('6๏ธโฃ ุงุฎุชุจุงุฑ ุฌูุจ ุงูุบุฑู ุจุนุฏ ุงูุชุญุฏูุซ...');
    const updatedRooms = await db.select({
      id: rooms.id,
      name: rooms.name,
      userCount: sql`(
        SELECT COUNT(*)::int 
        FROM room_users ru 
        WHERE ru.room_id = rooms.id
      )`
    })
    .from(rooms)
    .where(eq(rooms.isActive, true));

    console.log(`โ ุชู ุฌูุจ ${updatedRooms.length} ุบุฑูุฉ ูุญุฏุซุฉ:`);
    updatedRooms.forEach(room => {
      console.log(`   - ${room.name}: ${room.userCount} ูุณุชุฎุฏู`);
    });
    console.log('');

    // 7. ุชูุธูู - ุญุฐู ุบุฑูุฉ ุงูุงุฎุชุจุงุฑ
    console.log('7๏ธโฃ ุชูุธูู - ุญุฐู ุบุฑูุฉ ุงูุงุฎุชุจุงุฑ...');
    await db.delete(roomUsers).where(eq(roomUsers.roomId, testRoomId));
    await db.delete(rooms).where(eq(rooms.id, testRoomId));
    console.log('โ ุชู ุญุฐู ุบุฑูุฉ ุงูุงุฎุชุจุงุฑ');
    console.log('');

    console.log('๐ ุฌููุน ุงูุงุฎุชุจุงุฑุงุช ูุฌุญุช! ูุธุงู ุงูุบุฑู ูุนูู ุจุดูู ุตุญูุญ.');

  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุงุฎุชุจุงุฑ ูุธุงู ุงูุบุฑู:', error);
  } finally {
    await pool.end();
  }
}

// ุชุดุบูู ุงูุงุฎุชุจุงุฑ
testRoomsSystem();